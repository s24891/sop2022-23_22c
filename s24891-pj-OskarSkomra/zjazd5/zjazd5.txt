Zadanie1

#include<stdio.h>
#include<unistd.h>

int main(){

int input;

printf("pid is: %d\n", getpid());
printf("ppid is: %d\n\n", getppid());

printf("Waiting for input... ");
scanf("%d", &input);

return 0;
}

Zadanie2

#include<stdio.h>
#include<unistd.h>
#include<stdlib.h>
#include<sys/wait.h>


int main(){


pid_t parent = getpid();
pid_t child = fork();

if ( parent == getpid()){
int status = 0;
waitpid(0, &status, 0);
}

if (child > 0 ){
printf("Parent pid: %d\n", getpid());
printf("Parent ppid: %d\n", getppid());
} else {
printf("Child pid: %d\n", getpid());
printf("Child ppid: %d\n", getppid());
}

return 0;
}

Zadanie3

#include<stdio.h>
#include<unistd.h>
#include<stdlib.h>
#include<sys/wait.h>
#include<string.h>


int main(int argc, char *argv[]){

char number[1];
int i;
int suma;
int n;

strcpy(number, argv[1]);
n = atoi(number);


pid_t parent = getpid();
pid_t child = fork();

if ( parent == getpid()){
int status = 0;
waitpid(0, &status, 0);
}

if (child > 0 ){
for(i = 0; i <= n; i++){
suma = suma + i;
}
printf("Suma liczb: %d\n", suma);
} else {
for(i = 1; i <= n; i++){
if(i % 2 != 0){
printf("%d\n", i);
}
}
}

return 0;
}

Zadanie4

#include<stdio.h>
#include<unistd.h>
#include<stdlib.h>
#include<sys/wait.h>


int main(){

int i;
int procesy = 100;

for(i=0; i < procesy; i++){
if(fork() > 0){
break;
}else{
printf("PID: %d\n", getpid());
printf("PPID: %d\n", getppid());
fflush(stdout);
}
}

wait(NULL);
sleep(10);
return 0;
}

Zadanie5

#include<stdio.h>
#include<unistd.h>
#include<stdlib.h>
#include<sys/wait.h>


int main(){

int i;
int procesy = 100;
int status = 0;
pid_t parent = getpid();
pid_t child;

printf("parent PID: %d\n", getpid());
for(i = 0; i < procesy; i++){
child = fork();
if(child == 0){
printf("child PID: %d\n", getpid());
exit(0);
}
}

while ((parent = wait(&status)) > 0);

printf("parent PID: %d\n", getpid());

return 0;
}



