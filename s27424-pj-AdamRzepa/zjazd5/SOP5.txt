Napisz program, który 
przedstawi swój numer PID, oraz PPID
po wypisaniu, będzie czekał na standardowym wejściu na dane od użytkownika.
Uruchom program - nic nie podawaj na wejściu (program powinien czekać w nieskończoność).Uruchom nowy terminal. W nim za pomocą komendy kill zamknij ten program korzystając z PID wypisanego przez niego na początku.
zad 1.

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>

int main() {
    pid_t pid = getpid();
    pid_t ppid = getppid();
    printf("Mój PID to %d, a mój PPID to %d\n", pid, ppid);

    while(1) {
        getchar();
    }

    return 0;
}
zad2
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>

int main() {
    pid_t pid = getpid();
    pid_t ppid = getppid();
    printf("Proces rodzica - mój PID to %d, a mój PPID to %d\n", pid, ppid);
    pid_t f = fork();


    if(f == 0) {
        pid_t child_pid = getpid();
        pid_t child_ppid = getppid();

        printf("Proces potomka - mój PID to %d, a mój PPID to %d\n", child_pid, child_ppid);

        exit(0);
    }
    else if (f > 0) {
        wait(NULL);

        printf("Proces rodzica - proces potomny zakończył działanie.\n");
    }


    return 0;
}
zad3 #include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>

int main(int argc, char *argv[]) {
    if(argc != 2) {
        printf("Program wymaga podania jednego argumentu!\n");
        return 1;
    }

    int n = atoi(argv[1]);

    pid_t pid = fork();

    if(pid == 0) {
            for(int i = 1; i <= n; i += 2) {
            printf("%d ", i);
            fflush(stdout);
        }
        printf("\n");
    }
    else if(pid > 0) {
        int sum = 0;
        for(int i = 0; i <= n; i++) {
            sum += i;
        }

        wait(NULL);

        printf("Suma liczb od 0 do %d wynosi %d\n", n, sum);
    }
    return 0;
}

zad4
#include <stdio.h>
#include <sys/types.h>
#include <unistd.h>
#include <sys/wait.h>

int main(){
        int a = 0;
        int ilosc_procesow = 10;
        for(a=0;a < ilosc_procesow; a++){
                if(fork() > 0){
                        break;
                }
                else{
                        printf("PID: %d\t PPID: %d\n",getpid(), getppid());
                        fflush(stdout);
                }
        }
        wait(NULL);
        return 0;
}
zad 5
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>

int main() {
    pid_t child_pid;
    int status;
    for (int i = 0; i < 100; i++) {
        child_pid = fork();
        if (child_pid == 0) {
            printf("Proces potomny %d o PID %d\n", i+1, getpid());
            exit(0); 
        } 
    }

   
    printf("Proces rodzicielski o PID %d czeka na zakończenie procesów potomnych.\n", getpid());

    while ((child_pid = wait(&status)) > 0) {
        if (WIFEXITED(status)) {
            printf("Proces potomny o PID %d zakończony. Kod powrotu: %d\n", child_pid, WEXITSTATUS(status));
        } else {
            printf("Proces potomny o PID %d zakończony nieprawidłowo.\n", child_pid);
        }
    }

    printf("Wszystkie procesy potomne zakończone.\n");

    return 0;
}
zad 6
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#define MAX_MESSAGE_LENGTH 256
#define CHAT_FILE_PATH "/tmp/chat.txt"

// Funkcja do odczytywania wiadomości z pliku
void read_messages() {
    FILE *chat_file = fopen(CHAT_FILE_PATH, "r");
    if (chat_file == NULL) {
        printf("Nie można otworzyć pliku z wiadomościami.\n");
        return;
    }

    char message[MAX_MESSAGE_LENGTH];
    while (fgets(message, MAX_MESSAGE_LENGTH, chat_file) != NULL) {
        printf("%s", message);
    }

    fclose(chat_file);
}

// Funkcja do zapisywania wiadomości do pliku
void write_message(const char *message) {
    FILE *chat_file = fopen(CHAT_FILE_PATH, "a");
    if (chat_file == NULL) {
        printf("Nie można otworzyć pliku z wiadomościami.\n");
        return;
    }

    fprintf(chat_file, "%s\n", message);
    fclose(chat_file);
}

int main() {
    
    while (1) {
        // Odczytaj istniejące wiadomości
        read_messages();

        // Pobierz nową wiadomość od użytkownika
        char new_message[MAX_MESSAGE_LENGTH];
        printf("> ");
        fgets(new_message, MAX_MESSAGE_LENGTH, stdin);

        // Usuń znak nowej linii z końca wiadomości
        new_message[strcspn(new_message, "\n")] = '\0';

        // Zapisz nową wiadomość do pliku
        write_message(new_message);

        // Sprawdź, czy użytkownik chce zakończyć czat
        if (strcmp(new_message, "quit") == 0)
            break;

        // Odczekaj 0.5 sekundy przed ponownym odczytem
        sleep(1);
    }

    return 0;
}




Zad domowe
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>



int main() {
    pid_t B, C, D, E, F, G;
    pid_t pidB=getpid(), pidC=getpid();
    printf("A \n ");

    B = fork();
     if (B == 0) {
        printf("B \n ");

        D = fork();
        if (D == 0) {
            printf("D \n ");

        }

        E = fork();
        if (E == 0) {
            printf("E \n ");

        }


    }
    if(pidB==getpid()){
    wait(NULL);
    }
    C = fork();
    if (C == 0) {
        printf("C ");

        F = fork();
        if (F == 0) {
            printf("F \n");

        }

        G = fork();
        if (G == 0) {
            printf("G \n ");

        }


    }
    if(pidC==getpid()){
        wait(NULL);
    }


    return 0;
}


