1.
#include <stdio.h>
#include <unistd.h>
int main(){

    int a = getpid();
    int b = getppid();

    int liczba;

    printf("PID: %d\n", a);
    printf("PID: %d\n", b);

    scanf("%d", &liczba);

    return 0;

}
Otwieram nowy terminal.
->KILL 46880 -> Terminated

2.
#include <stdio.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
int main(){
   int a = fork();
   int status = 0;

    if(a > 0){
        printf("Jestem rodzicem. PID dziecka: %d\n PID rodzica: %d\n", a, getppid());

        wait(&status);
    }
    else if (a == 0){
        printf("Jestem dzieckiem. Moj PID: %d\n PID rodzica %d\n", getpid(), getppid());

        sleep(3);
    }

    return 0;
}
3.
#include <stdio.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
int main(){
    int a;
    int suma = 1;
    int i;
    int liczba;
    printf("Podaj liczbe: ");
    scanf("%d", &liczba);


    a = fork();

    if(a == 0){
            for(i = 0; i < liczba; i++){
        suma = i*2-1;
        printf("SUMA DZIECKA: %d\n", suma);
    }

    }
    else if (a > 0){
    for(i = 1; i < liczba; i++){
        suma = i*2;
        printf("SUMA RODZICA: %d\n", suma);

    }
    }

return 0;
}
4.

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>
int main(){
    int i;
    pid_t dziecko;


    for(i = 1; i <= 100; i++){
        dziecko = fork();

        if(dziecko < 0){
            fprintf(stderr, "Blad");
            return 1;
        }else if(dziecko == 0){
            printf("Proces potomny %d o id: %d\n", i, getpid());
            break;
        }else{
            wait(NULL);
        }
    }

return 0;
}

5.
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>

int main() {
    int i;
    pid_t child_pid, wpid;
    int status;

    for (i = 1; i <= 100; i++) {
        child_pid = fork();

        if (child_pid < 0) {
            fprintf(stderr, "Błąd\n");
            return 1;
        } else if (child_pid == 0) {

            printf("Proces potomny %d o identyfikatorze: %d\n", i, getpid());
            exit(0);
        }
    }

    while ((wpid = waitpid(-1, &status, 0)) > 0) {
        if (WIFEXITED(status)) {
            printf("Proces potomny o id %d zakończony\n", wpid);
        } else {
            printf("Proces potomny o id %d zakończony niepowodzeniem\n", wpid);
        }
    }

    return 0;
}

6.

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>
#include <fcntl.h>

#define MAX_MESSAGE_LENGTH 100

void send_message(const char* message) {
    int fd = open("/tmp/chat_file", O_WRONLY | O_CREAT | O_TRUNC, 0644);
    if (fd == -1) {
        perror("Błąd otwierania pliku");
        exit(1);
    }

    write(fd, message, MAX_MESSAGE_LENGTH);
    close(fd);
}

void receive_message(char* message) {
    int fd = open("/tmp/chat_file", O_RDONLY);
    if (fd == -1) {
        perror("Błąd otwierania pliku");
        exit(1);
    }

    read(fd, message, MAX_MESSAGE_LENGTH);
    close(fd);
}

int main() {
    pid_t child_pid;
    char message[MAX_MESSAGE_LENGTH];


    int fd = open("/tmp/chat_file", O_WRONLY | O_CREAT | O_TRUNC, 0644);
    if (fd == -1) {
        perror("Błąd podczas tworzenia pliku");
        exit(1);
    }
    close(fd);

    child_pid = fork();
    if (child_pid == -1) {
        perror("Błąd tworzenia procesu potomnego");
        exit(1);
    }

    if (child_pid == 0) {

        while (1) {
            printf("Użytkownik A: ");
            fgets(message, MAX_MESSAGE_LENGTH, stdin);
            send_message(message);
        }
    } else {

        while (1) {
            receive_message(message);
            printf("Użytkownik B: %s", message);
        }
        wait(NULL);
    }

    return 0;
}
